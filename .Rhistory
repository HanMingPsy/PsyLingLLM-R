return("一些")
}
if (x %in% c("全部","所有")) {
return("全部")
}
# 兜底
return(NA)
}
df <- read_csv("C:/Users/hanm5/Desktop/LLM/测试/Data.csv")
df_clean <- df %>%
mutate(
# Condition_Fact 处理
Condition_Fact = ifelse(grepl("d2", Condition_Face), "全部",
sapply(Condition_Fact, classify_term)),
# Condition_Face 处理
Condition_Face = ifelse(grepl("c1", Condition_Face), "否", "是"),
# r1 替换为 ___
r1 = "___",
# r2 的逗号换成中文句号
r2 = gsub("，", "。”", r2),
# Material 列，只合并下划线和 r2
Material = paste(context, r1, r2, sep = "")
) %>%
select(Condition_Fact, Condition_Face, Material)
# 查看结果
print(df_clean)
View(df_clean)
library(dplyr)
library(readr)
classify_term <- function(x) {
# 数字分数
if (grepl("//", x)) {
parts <- strsplit(x, "//")[[1]]
num <- as.numeric(parts[1])
den <- as.numeric(parts[2])
ratio <- num / den
if (ratio == 1) {
return("全部")
} else  {
return("一些")
}
#
# if (ratio == 1) {
#   return("全部")
# } else if (ratio >= 2/3) {
#   return("大多数")
# } else if (ratio >= 0.5) {
#   return("多数")
# } else {
#   return("少数")  # 如果你需要，也可以加少数类别
# }
}
# 中文数量词
if (x %in% c("一半以上","一半以上/n","一多半","一多半/n",
"大部分","大部分/n","多数","多数/n",
"许多","许多/n","超半数","超半数/n")) {
return("一些")
}
if (x %in% c("一大半","一大半/n","大多数/n","绝大多数",
"绝大多数/n","绝大部分/n","大量/n")) {
return("一些")
}
if (x %in% c("全部","所有")) {
return("全部")
}
# 兜底
return(NA)
}
df <- read_csv("C:/Users/hanm5/Desktop/LLM/测试/Data.csv")
df_clean <- df %>%
mutate(
# Condition_Fact 处理
Condition_Fact = ifelse(grepl("d2", Condition_Face), "全部",
sapply(Condition_Fact, classify_term)),
# Condition_Face 处理
Condition_Face = ifelse(grepl("c1", Condition_Face), "否", "是"),
# r1 替换为 ___
r1 = "___",
# r2 的逗号换成中文句号
r2 = gsub("，", "。”", r2),
# Material 列，只合并下划线和 r2
Material = paste(context, r1, r2, sep = "")
) %>%
select(Condition_Fact, Condition_Face, Material)
# 查看结果
print(df_clean)
# trial_prompt <- "在下划线位置补全一个词。该词必须且只能从【全部、大多数、多数、一些、少数、极少数、没有】中选择，除补全星号外不要更改句子中的任何其他部分。不要回答其他内容："
trial_prompt <- "在下划线位置补全一个词。该词必须且只能从【全部、一些、没有】中选择，不要回答其他内容："
multi_model_experiment(
data = df_clean,
trial_prompt = trial_prompt,
model_file = "C:/Users/hanm5/Desktop/LLM/测试/Model.xlsx",
experiment_fn = trial_experiment,
output_path = "C:/Users/hanm5/Desktop/LLM/测试/EXP1",
max_tokens = 5000,
delay = 0
)
library(dplyr)
library(readr)
library(PsyLingLLM)
classify_term <- function(x) {
# 数字分数
if (grepl("//", x)) {
parts <- strsplit(x, "//")[[1]]
num <- as.numeric(parts[1])
den <- as.numeric(parts[2])
ratio <- num / den
if (ratio == 1) {
return("全部")
} else  {
return("一些")
}
#
# if (ratio == 1) {
#   return("全部")
# } else if (ratio >= 2/3) {
#   return("大多数")
# } else if (ratio >= 0.5) {
#   return("多数")
# } else {
#   return("少数")  # 如果你需要，也可以加少数类别
# }
}
# 中文数量词
if (x %in% c("一半以上","一半以上/n","一多半","一多半/n",
"大部分","大部分/n","多数","多数/n",
"许多","许多/n","超半数","超半数/n")) {
return("一些")
}
if (x %in% c("一大半","一大半/n","大多数/n","绝大多数",
"绝大多数/n","绝大部分/n","大量/n")) {
return("一些")
}
if (x %in% c("全部","所有")) {
return("全部")
}
# 兜底
return(NA)
}
df <- read_csv("C:/Users/hanm5/Desktop/LLM/测试/Data.csv")
df_clean <- df %>%
mutate(
# Condition_Fact 处理
Condition_Fact = ifelse(grepl("d2", Condition_Face), "全部",
sapply(Condition_Fact, classify_term)),
# Condition_Face 处理
Condition_Face = ifelse(grepl("c1", Condition_Face), "否", "是"),
# r1 替换为 ___
r1 = "___",
# r2 的逗号换成中文句号
r2 = gsub("，", "。”", r2),
# Material 列，只合并下划线和 r2
Material = paste(context, r1, r2, sep = "")
) %>%
select(Condition_Fact, Condition_Face, Material)
# 查看结果
print(df_clean)
# trial_prompt <- "在下划线位置补全一个词。该词必须且只能从【全部、大多数、多数、一些、少数、极少数、没有】中选择，除补全星号外不要更改句子中的任何其他部分。不要回答其他内容："
trial_prompt <- "在下划线位置补全一个词。该词必须且只能从【全部、一些、没有】中选择，不要回答其他内容："
multi_model_experiment(
data = df_clean,
trial_prompt = trial_prompt,
model_file = "C:/Users/hanm5/Desktop/LLM/测试/Model.xlsx",
experiment_fn = trial_experiment,
output_path = "C:/Users/hanm5/Desktop/LLM/测试/EXP1",
max_tokens = 5000,
delay = 0
)
library(dplyr)
library(readr)
library(PsyLingLLM)
classify_term <- function(x) {
# 数字分数
if (grepl("//", x)) {
parts <- strsplit(x, "//")[[1]]
num <- as.numeric(parts[1])
den <- as.numeric(parts[2])
ratio <- num / den
if (ratio == 1) {
return("全部")
} else  {
return("一些")
}
#
# if (ratio == 1) {
#   return("全部")
# } else if (ratio >= 2/3) {
#   return("大多数")
# } else if (ratio >= 0.5) {
#   return("多数")
# } else {
#   return("少数")  # 如果你需要，也可以加少数类别
# }
}
# 中文数量词
if (x %in% c("一半以上","一半以上/n","一多半","一多半/n",
"大部分","大部分/n","多数","多数/n",
"许多","许多/n","超半数","超半数/n")) {
return("一些")
}
if (x %in% c("一大半","一大半/n","大多数/n","绝大多数",
"绝大多数/n","绝大部分/n","大量/n")) {
return("一些")
}
if (x %in% c("全部","所有")) {
return("全部")
}
# 兜底
return(NA)
}
df <- read_csv("C:/Users/hanm5/Desktop/LLM/测试/Data.csv")
df_clean <- df %>%
mutate(
# Condition_Fact 处理
Condition_Fact = ifelse(grepl("d2", Condition_Face), "全部",
sapply(Condition_Fact, classify_term)),
# Condition_Face 处理
Condition_Face = ifelse(grepl("c1", Condition_Face), "否", "是"),
# r1 替换为 ___
r1 = "___",
# r2 的逗号换成中文句号
r2 = gsub("，", "。”", r2),
# Material 列，只合并下划线和 r2
Material = paste(context, r1, r2, sep = "")
) %>%
select(Condition_Fact, Condition_Face, Material)
# 查看结果
print(df_clean)
# trial_prompt <- "在下划线位置补全一个词。该词必须且只能从【全部、大多数、多数、一些、少数、极少数、没有】中选择，除补全星号外不要更改句子中的任何其他部分。不要回答其他内容："
trial_prompt <- "在下划线位置补全一个词。该词必须且只能从【全部、一些、没有】中选择，不要回答其他内容："
multi_model_experiment(
data = df_clean,
trial_prompt = trial_prompt,
model_file = "C:/Users/hanm5/Desktop/LLM/测试/Model.xlsx",
experiment_fn = trial_experiment,
output_path = "C:/Users/hanm5/Desktop/LLM/测试/EXP1",
max_tokens = 5000,
delay = 0
)
library(PsyLingLLM)
multi_model_experiment(
data = df_clean,
trial_prompt = trial_prompt,
model_file = "C:/Users/hanm5/Desktop/LLM/测试/Model.xlsx",
experiment_fn = trial_experiment,
output_path = "C:/Users/hanm5/Desktop/LLM/测试/EXP1",
max_tokens = 5000,
delay = 0
)
library(dplyr)
library(readr)
library(PsyLingLLM)
classify_term <- function(x) {
# 数字分数
if (grepl("//", x)) {
parts <- strsplit(x, "//")[[1]]
num <- as.numeric(parts[1])
den <- as.numeric(parts[2])
ratio <- num / den
if (ratio == 1) {
return("全部")
} else  {
return("一些")
}
#
# if (ratio == 1) {
#   return("全部")
# } else if (ratio >= 2/3) {
#   return("大多数")
# } else if (ratio >= 0.5) {
#   return("多数")
# } else {
#   return("少数")  # 如果你需要，也可以加少数类别
# }
}
# 中文数量词
if (x %in% c("一半以上","一半以上/n","一多半","一多半/n",
"大部分","大部分/n","多数","多数/n",
"许多","许多/n","超半数","超半数/n")) {
return("一些")
}
if (x %in% c("一大半","一大半/n","大多数/n","绝大多数",
"绝大多数/n","绝大部分/n","大量/n")) {
return("一些")
}
if (x %in% c("全部","所有")) {
return("全部")
}
# 兜底
return(NA)
}
df <- read_csv("C:/Users/hanm5/Desktop/LLM/测试/Data.csv")
df_clean <- df %>%
mutate(
# Condition_Fact 处理
Condition_Fact = ifelse(grepl("d2", Condition_Face), "全部",
sapply(Condition_Fact, classify_term)),
# Condition_Face 处理
Condition_Face = ifelse(grepl("c1", Condition_Face), "否", "是"),
# r1 替换为 ___
r1 = "___",
# r2 的逗号换成中文句号
r2 = gsub("，", "。”", r2),
# Material 列，只合并下划线和 r2
Material = paste(context, r1, r2, sep = "")
) %>%
select(Condition_Fact, Condition_Face, Material)
# 查看结果
print(df_clean)
# trial_prompt <- "在下划线位置补全一个词。该词必须且只能从【全部、大多数、多数、一些、少数、极少数、没有】中选择，除补全星号外不要更改句子中的任何其他部分。不要回答其他内容："
trial_prompt <- "在下划线位置补全一个词。该词必须且只能从【全部、一些、没有】中选择，不要回答其他内容："
multi_model_experiment(
data = df_clean,
trial_prompt = trial_prompt,
model_file = "C:/Users/hanm5/Desktop/LLM/测试/Model.xlsx",
experiment_fn = trial_experiment,
output_path = "C:/Users/hanm5/Desktop/LLM/测试/EXP1",
max_tokens = 5000,
delay = 0
)
library(dplyr)
library(readr)
library(PsyLingLLM)
library(dplyr)
library(readr)
library(PsyLingLLM)
classify_term <- function(x) {
# 数字分数
if (grepl("//", x)) {
parts <- strsplit(x, "//")[[1]]
num <- as.numeric(parts[1])
den <- as.numeric(parts[2])
ratio <- num / den
if (ratio == 1) {
return("全部")
} else  {
return("一些")
}
#
# if (ratio == 1) {
#   return("全部")
# } else if (ratio >= 2/3) {
#   return("大多数")
# } else if (ratio >= 0.5) {
#   return("多数")
# } else {
#   return("少数")  # 如果你需要，也可以加少数类别
# }
}
# 中文数量词
if (x %in% c("一半以上","一半以上/n","一多半","一多半/n",
"大部分","大部分/n","多数","多数/n",
"许多","许多/n","超半数","超半数/n")) {
return("一些")
}
if (x %in% c("一大半","一大半/n","大多数/n","绝大多数",
"绝大多数/n","绝大部分/n","大量/n")) {
return("一些")
}
if (x %in% c("全部","所有")) {
return("全部")
}
# 兜底
return(NA)
}
df <- read_csv("C:/Users/hanm5/Desktop/LLM/测试/Data.csv")
df_clean <- df %>%
mutate(
# Condition_Fact 处理
Condition_Fact = ifelse(grepl("d2", Condition_Face), "全部",
sapply(Condition_Fact, classify_term)),
# Condition_Face 处理
Condition_Face = ifelse(grepl("c1", Condition_Face), "否", "是"),
# r1 替换为 ___
r1 = "___",
# r2 的逗号换成中文句号
r2 = gsub("，", "。”", r2),
# Material 列，只合并下划线和 r2
Material = paste(context, r1, r2, sep = "")
) %>%
select(Condition_Fact, Condition_Face, Material)
# 查看结果
print(df_clean)
# trial_prompt <- "在下划线位置补全一个词。该词必须且只能从【全部、大多数、多数、一些、少数、极少数、没有】中选择，除补全星号外不要更改句子中的任何其他部分。不要回答其他内容："
trial_prompt <- "在下划线位置补全一个词。该词必须且只能从【全部、一些、没有】中选择，不要回答其他内容："
multi_model_experiment(
data = df_clean,
trial_prompt = trial_prompt,
model_file = "C:/Users/hanm5/Desktop/LLM/测试/Model.xlsx",
experiment_fn = trial_experiment,
output_path = "C:/Users/hanm5/Desktop/LLM/测试/EXP1",
max_tokens = 5000,
delay = 0
)
multi_model_experiment(
data = df_clean,
trial_prompt = trial_prompt,
model_file = "C:/Users/hanm5/Desktop/LLM/测试/Model.xlsx",
experiment_fn = trial_experiment,
output_path = "C:/Users/hanm5/Desktop/LLM/测试/EXP1",
max_tokens = 5000,
delay = 0
)
# --------------------------
# 2. 单个模型实验示例
# --------------------------
result <- trial_experiment(
data = "Demo/Materials_for_Demo/garden_path_sentences.csv",
api_key = api_key,
model = model,
api_url = api_url,
random = FALSE,
max_tokens = 5000,
enable_thinking = FALSE
)
library(PsyLingLLM)
# trial_prompt <- "在下划线位置补全一个词。该词必须且只能从【全部、大多数、多数、一些、少数、极少数、没有】中选择，除补全星号外不要更改句子中的任何其他部分。不要回答其他内容："
trial_prompt <- "在下划线位置补全一个词。该词必须且只能从【全部、一些、没有】中选择，不要回答其他内容："
multi_model_experiment(
data = df_clean,
trial_prompt = trial_prompt,
model_file = "C:/Users/hanm5/Desktop/LLM/测试/Model.xlsx",
experiment_fn = trial_experiment,
output_path = "C:/Users/hanm5/Desktop/LLM/测试/EXP1",
max_tokens = 5000,
delay = 0
)
library(dplyr)
library(readr)
library(PsyLingLLM)
trial_prompt <- "在下划线位置补全一个词。该词必须且只能从【全部、一些、没有】中选择，不要回答其他内容："
multi_model_experiment(
data = df_clean,
trial_prompt = trial_prompt,
model_file = "C:/Users/hanm5/Desktop/LLM/测试/Model.xlsx",
experiment_fn = trial_experiment,
output_path = "C:/Users/hanm5/Desktop/LLM/测试/EXP1",
max_tokens = 5000,
delay = 0
)
devtools::clean_dll()   # 清理旧编译产物
devtools::document()
devtools::install()
classify_term <- function(x) {
# 数字分数
if (grepl("//", x)) {
parts <- strsplit(x, "//")[[1]]
num <- as.numeric(parts[1])
den <- as.numeric(parts[2])
ratio <- num / den
if (ratio == 1) {
return("全部")
} else  {
return("一些")
}
#
# if (ratio == 1) {
#   return("全部")
# } else if (ratio >= 2/3) {
#   return("大多数")
# } else if (ratio >= 0.5) {
#   return("多数")
# } else {
#   return("少数")  # 如果你需要，也可以加少数类别
# }
}
# 中文数量词
if (x %in% c("一半以上","一半以上/n","一多半","一多半/n",
"大部分","大部分/n","多数","多数/n",
"许多","许多/n","超半数","超半数/n")) {
return("一些")
}
if (x %in% c("一大半","一大半/n","大多数/n","绝大多数",
"绝大多数/n","绝大部分/n","大量/n")) {
return("一些")
}
if (x %in% c("全部","所有")) {
return("全部")
}
# 兜底
return(NA)
}
df <- read_csv("C:/Users/hanm5/Desktop/LLM/测试/Data.csv")
df_clean <- df %>%
mutate(
# Condition_Fact 处理
Condition_Fact = ifelse(grepl("d2", Condition_Face), "全部",
sapply(Condition_Fact, classify_term)),
# Condition_Face 处理
Condition_Face = ifelse(grepl("c1", Condition_Face), "否", "是"),
# r1 替换为 ___
r1 = "___",
# r2 的逗号换成中文句号
r2 = gsub("，", "。”", r2),
# Material 列，只合并下划线和 r2
Material = paste(context, r1, r2, sep = "")
) %>%
select(Condition_Fact, Condition_Face, Material)
# 查看结果
print(df_clean)
# trial_prompt <- "在下划线位置补全一个词。该词必须且只能从【全部、大多数、多数、一些、少数、极少数、没有】中选择，除补全星号外不要更改句子中的任何其他部分。不要回答其他内容："
trial_prompt <- "在下划线位置补全一个词。该词必须且只能从【全部、一些、没有】中选择，不要回答其他内容："
multi_model_experiment(
data = df_clean,
trial_prompt = trial_prompt,
model_file = "C:/Users/hanm5/Desktop/LLM/测试/Model.xlsx",
experiment_fn = trial_experiment,
output_path = "C:/Users/hanm5/Desktop/LLM/测试/EXP1",
max_tokens = 5000,
delay = 0
)
remove.packages("PsyLingLLM")
