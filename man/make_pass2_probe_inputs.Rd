% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/register_build_input.R
\name{make_pass2_probe_inputs}
\alias{make_pass2_probe_inputs}
\title{Build Pass-2 EFFECTIVE probe inputs (no forced system; structural role inference)}
\usage{
make_pass2_probe_inputs(
  std,
  api_key,
  content = "Hello!",
  role_mapping = NULL,
  defaults = list(stream = TRUE, max_tokens = 512, temperature = 0.7),
  include_system = FALSE,
  pass1_body_for_roles = NULL
)
}
\arguments{
\item{std}{list from build_standardized_input()}

\item{api_key}{character(1)}

\item{content}{character(1) value for \code{"\${CONTENT}"}}

\item{role_mapping}{NULL or list(user=..., system=...)}

\item{defaults}{named list of probe-only params (e.g., list(stream=TRUE, max_tokens=512, temperature=0.7))}

\item{include_system}{logical(1), default FALSE; add system only when role exists and default_system present}

\item{pass1_body_for_roles}{optional list; when provided and role_mapping is NULL, roles are inferred from this body}
}
\value{
list(headers=list, body=list, role_used=list(user=..., system=...|NULL))
}
\description{
Behavior:
- Never add HTTP headers automatically (no implicit Accept).
- If `role_mapping` is NULL, infer roles structurally via `infer_role_mapping_from_body()`
  (preferred when `pass1_body_for_roles` is provided); otherwise fall back to
  `std$diagnostics$role_mapping_inferred` when available. If still absent, only
  user role defaults to "user".
- `include_system = TRUE` only injects a system message when BOTH:
    (a) diagnostics has a non-empty `default_system`, and
    (b) a system role label exists (from `role_mapping` or inference).
  Otherwise system is skipped (no fallback/forcing).
- For messages style, rebuild messages strictly by schema keys from diagnostics:
    [ optional system ], then [ required user ].
- For single-prompt, keep the prompt key shape; only merge probe defaults.
- Probe defaults are merged into the body top-level and placeholders are substituted.
}
