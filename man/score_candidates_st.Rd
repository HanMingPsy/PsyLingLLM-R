% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/register_rank_endpoint.R
\name{score_candidates_st}
\alias{score_candidates_st}
\title{Rank streaming (SSE) candidates for answer/think
  (temporal aggregation, delta-aware, conflict-guarded)}
\usage{
score_candidates_st(
  raw_df,
  raw_json,
  lexicon = default_keyword_lexicon(),
  prob_thresh = list(answer = 0.7, think = 0.55),
  top_k = 10
)
}
\arguments{
\item{raw_df}{A pre-flattened \code{data.frame} of event-level paths and values,
typically containing columns such as \code{event_index}, \code{path}, \code{key},
and \code{value}. May be \code{NULL} if only \code{raw_json} is supplied.}

\item{raw_json}{A list of parsed SSE JSON payloads, where each element corresponds
to one event. Each should be a JSON-like list structure.}

\item{lexicon}{A keyword lexicon list (see \code{\link{default_keyword_lexicon}}),
containing entries \code{$st$answer}, \code{$st$think}, and a global
\code{$blacklist}.}

\item{prob_thresh}{Named list of acceptance thresholds in \code{[0,1]}, controlling
when top candidates for each side are accepted (defaults to
\code{list(answer = 0.70, think = 0.55)}).}

\item{top_k}{Integer. Keep at most this many top-ranked candidates in the returned
\code{candidates} table.}
}
\value{
A list with two elements:
  \describe{
    \item{\code{best}}{List containing \code{answer} and \code{think} entries.
      Each entry is either \code{NULL} or a list with fields
      \code{path}, \code{key}, \code{text}, \code{prob}, and \code{score}.}
    \item{\code{candidates}}{A data frame of up to \code{top_k} rows containing
      event-level metrics, normalized scores, and probabilities for each
      candidate path.}
  }
}
\description{
Given a sequence of **streaming** SSE payloads (parsed JSON objects or a
pre-flattened table), this function aggregates token deltas across events and
scores candidate JSON paths for the most probable **answer** and **think**
fields.
}
\details{
The algorithm aggregates streaming delta events, rewarding stable token updates
across time and penalizing conflicts (e.g., answer-like text inside reasoning
segments). It uses early/late-event cues, lexical matching, and conflict guards.
See \code{\link{score_candidates_ns}} for the non-streaming variant.
}
\seealso{
\code{\link{score_candidates_ns}}, \code{\link{flatten_json_paths}},
  \code{\link{default_keyword_lexicon}}
}
