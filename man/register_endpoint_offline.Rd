% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/register_utils.R
\name{register_endpoint_offline}
\alias{register_endpoint_offline}
\title{Register an LLM endpoint offline (supports reasoning / thinking path)}
\usage{
register_endpoint_offline(
  model,
  provider = "official",
  generation_interface = "chat",
  url,
  headers,
  body,
  role_mapping = NULL,
  optional_defaults = list(stream = list(value = TRUE, type = "logical"), max_tokens =
    list(value = 1024, type = "numeric"), temperature = list(value = 0.7, type =
    "numeric")),
  output_spec = NULL,
  streaming_spec = NULL,
  thinking_path = NULL,
  thinking_delta_path = NULL,
  default_system = NULL,
  auto_register = TRUE
)
}
\arguments{
\item{model}{Character. Model key, e.g. "deepseek-reasoner".}

\item{provider}{Character. "official", "proxy", or "local".}

\item{generation_interface}{Character. Interface type, e.g. "chat", "responses".}

\item{url}{Character. Endpoint URL.}

\item{headers}{Named list of HTTP headers.}

\item{body}{Named list of body fields (with placeholders).}

\item{role_mapping}{Named list mapping roles; NULL stored as ~.}

\item{optional_defaults}{Named list (stream, max_tokens, temperature).}

\item{output_spec}{Named list of output paths (each path may be a list of strings).}

\item{streaming_spec}{Named list of streaming config.}

\item{thinking_path}{Optional list specifying reasoning field path in response (e.g. list("choices","message","reasoning_content")).}

\item{thinking_delta_path}{Optional list specifying reasoning delta path in streaming (e.g. list("choices","delta","reasoning_content")).}

\item{default_system}{Character or NULL. Default system message; if NULL, YAML shows ~.}

\item{auto_register}{Logical. TRUE to skip confirmation prompt.}
}
\value{
Invisibly returns the registry entry.
}
\description{
Builds a registry entry offline â€” no API key or network required.
Accepts standard list-style paths and automatically serializes to
PsyLingLLM YAML format. Supports reasoning models (thinking_path / thinking_delta_path).
}
