% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/conversation_experiment_with_feedback.R
\name{conversation_experiment_with_feedback}
\alias{conversation_experiment_with_feedback}
\title{Run LLM Conversation Experiment with Feedback (no injected rows in replace_next)}
\usage{
conversation_experiment_with_feedback(
  model_key,
  generation_interface = "chat",
  api_key,
  api_url = NULL,
  data,
  trial_prompt = NULL,
  system_content = NULL,
  assistant_content = NULL,
  optionals = NULL,
  role_mapping = NULL,
  history_mode = c("all", "last"),
  max_history_turns = Inf,
  max_turns = NULL,
  stream = NULL,
  timeout = getOption("psylingllm.llm_timeout_sec", 120L),
  repeats = 1,
  random = FALSE,
  apply_mode = c("replace_next", "insert_dynamic"),
  feedback_fn,
  delay = 0,
  output_path = NULL,
  overwrite = TRUE,
  return_raw = FALSE
)
}
\arguments{
\item{model_key}{Character(1).}

\item{generation_interface}{Character(1). Default "chat".}

\item{api_key}{Character(1). Provider API key.}

\item{api_url}{Optional character(1). Overrides registry default URL; required for non-official providers.}

\item{data}{data.frame/tibble with ConversationId, Turn, Material; optional TrialPrompt.}

\item{trial_prompt}{Optional character(1). Global prefix when row TrialPrompt is missing.}

\item{system_content}{Optional character(1) or NULL. If NULL, uses registry `default_system` when available.}

\item{assistant_content}{Optional static few-shot seed: character vector or a list of message objects
(`list(role=..., content=...)`). These appear before rolling history and are preserved as-is.}

\item{optionals}{Optional named list. NULL → use registry typed defaults; list → send only user keys; missing → use defaults.}

\item{role_mapping}{Optional mapping for local labels; not forced into `llm_caller()` unless supplied.}

\item{history_mode}{"all" or "last". Default "all".}

\item{max_history_turns}{Integer(1) or Inf. Only for "all". Each turn contributes 2 messages.}

\item{max_turns}{Integer(1) or NULL. Per-conv cap for insert_dynamic. Ignored for replace_next.}

\item{stream}{Logical(1) or NULL. NULL uses registry default; otherwise force streaming/non-streaming.}

\item{timeout}{Integer(1). Per-request timeout seconds.}

\item{repeats}{Integer(1). Conversation block repetitions before randomization.}

\item{random}{Logical(1). Shuffle conversation order (Turn order preserved inside).}

\item{apply_mode}{"replace_next" or "insert_dynamic".}

\item{feedback_fn}{function(response, row, context) -> list(name, next_prompt, meta).}

\item{delay}{Numeric(1). Seconds between turns.}

\item{output_path}{Character or NULL. Where to save results/logs.}

\item{overwrite}{Logical(1). Overwrite outputs.}

\item{return_raw}{Logical(1). Include raw request/response.}
}
\value{
Tibble with PsyLingLLM schema per executed turn.
}
\description{
Multi-turn conversations identified by `ConversationId` and ordered by `Turn`.
Rolling history (seed + past turns) is passed to `llm_caller()` via `assistant_content`.
}
\details{
Feedback semantics:
- apply_mode = "replace_next": DO NOT insert extra rows; simply overwrite the
  next planned row's `TrialPrompt` in the same conversation.
- apply_mode = "insert_dynamic": if under per-conversation cap, append a new
  executable row (next turn) using `next_prompt`.

All request assembly (URL/headers/body/messages/defaults) is registry-driven
by `llm_caller()`; this function never mutates headers.
}
